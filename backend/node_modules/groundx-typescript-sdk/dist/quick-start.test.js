"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
it.skip("quick start", () => __awaiter(void 0, void 0, void 0, function* () {
    // const groundx = new Groundx({
    //   apiKey: process.env.GROUNDX_API_KEY,
    // });
    // const project = await groundx.project.create({
    //   project: {
    //     name: "My Project",
    //   },
    // });
    // const bucket = await groundx.bucket.create({
    //   bucket: {
    //     name: "My Bucket",
    //   },
    // });
    // let ingest = await groundx.document.uploadRemote({
    //   documents: [
    //     {
    //       bucketId: bucket.data.bucket.bucketId,
    //       sourceUrl:
    //         "https://raw.githubusercontent.com/konfig-dev/groundx-sdks/main/document.txt",
    //     },
    //   ],
    // });
    // while (ingest.data.ingest.status !== "complete") {
    //   ingest = await groundx.document.getProcessingStatusById({
    //     processId: ingest.data.ingest.processId,
    //   });
    //   // sleep for 3 seconds
    //   await new Promise((resolve) => setTimeout(resolve, 3000));
    // }
    // const search = await groundx.search.content({
    //   id: project.data.project.projectId,
    //   search: {
    //     query: "hello",
    //   },
    // });
    // console.log(search.data);
}));
it.skip("quick start - local", () => __awaiter(void 0, void 0, void 0, function* () {
    // const groundx = new Groundx({
    //   apiKey: process.env.GROUNDX_API_KEY,
    // });
    // const projects = await groundx.projects.list();
    // const project = projects.data.projects?.[0];
    // const buckets = await groundx.buckets.list();
    // const bucket = buckets.data.buckets?.[0];
    // if (project === undefined || bucket === undefined) {
    //   throw new Error("project or bucket is undefined");
    // }
    // let ingest = await groundx.documents.uploadLocal([
    //   {
    //     blob: fs.readFileSync("../../document.txt"),
    //     metadata: {
    //       bucketId: bucket.bucketId,
    //       fileName: "document-1.txt",
    //       fileType: "txt",
    //     },
    //   },
    //   {
    //     blob: fs.readFileSync("../../document.txt"),
    //     metadata: {
    //       bucketId: bucket.bucketId,
    //       fileName: "document-2.txt",
    //       fileType: "txt",
    //     },
    //   },
    // ]);
    // while (ingest.data.ingest.status !== "complete") {
    //   ingest = await groundx.documents.getProcessingStatusById({
    //     processId: ingest.data.ingest.processId,
    //   });
    //   // sleep for 3 seconds
    //   await new Promise((resolve) => setTimeout(resolve, 3000));
    // }
    // const search = await groundx.search.content({
    //   id: project.projectId,
    //   search: {
    //     query: "hello",
    //   },
    // });
    // console.log(search.data);
}));
