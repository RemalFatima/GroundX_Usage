import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from 'groundx-typescript-sdk/dist/configuration';
import { RequestArgs, BaseAPI } from 'groundx-typescript-sdk/dist/base';
import { DocumentListResponse } from 'groundx-typescript-sdk/dist/models';
import { DocumentLocalIngestRequestInner } from 'groundx-typescript-sdk/dist/models';
import { DocumentLookupResponse } from 'groundx-typescript-sdk/dist/models';
import { DocumentRemoteIngestRequest } from 'groundx-typescript-sdk/dist/models';
import { DocumentResponse } from 'groundx-typescript-sdk/dist/models';
import { IngestResponse } from 'groundx-typescript-sdk/dist/models';
import { ProcessStatusResponse } from 'groundx-typescript-sdk/dist/models';
import { ProcessingStatus } from 'groundx-typescript-sdk/dist/models';
import { Sort } from 'groundx-typescript-sdk/dist/models';
import { SortOrder } from 'groundx-typescript-sdk/dist/models';
import { WebsiteCrawlRequest } from 'groundx-typescript-sdk/dist/models';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export declare const DocumentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary crawl_website
     * @param {WebsiteCrawlRequest} [websiteCrawlRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crawlWebsite: (websiteCrawlRequest?: WebsiteCrawlRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (multiple)
     * @param {Array<string>} documentIds A list of documentIds which correspond to documents ingested by GroundX
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete: (documentIds: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (singular)
     * @param {string} documentId A documentId which correspond to a document ingested by GroundX
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1: (documentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get
     * @param {string} documentId The documentId of the document for which GroundX information will be provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: (documentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get_processing_status_by_id
     * @param {string} processId the processId for the ingest process being checked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessingStatusById: (processId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_local
     * @param {Array<DocumentLocalIngestRequestInner>} [documentLocalIngestRequestInner]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ingestLocal: (documentLocalIngestRequestInner?: Array<DocumentLocalIngestRequestInner>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_remote
     * @param {DocumentRemoteIngestRequest} [documentRemoteIngestRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ingestRemote: (documentRemoteIngestRequest?: DocumentRemoteIngestRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary list
     * @param {number} [n] The maximum number of returned documents. Accepts 1-100 with a default of 20.
     * @param {string} [filter] Only documents with names that contain the filter string will be returned in the results.
     * @param {Sort} [sort] The document attribute that will be used to sort the results.
     * @param {SortOrder} [sortOrder] The order in which to sort the results. A value for sort must also be set.
     * @param {ProcessingStatus} [status] A status filter on the get documents query. If this value is set, then only documents with this status will be returned in the results.
     * @param {string} [nextToken] A token for pagination. If the number of documents for a given query is larger than n, the response will include a \&quot;nextToken\&quot; value. That token can be included in this field to retrieve the next batch of n documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: (n?: number, filter?: string, sort?: Sort, sortOrder?: SortOrder, status?: ProcessingStatus, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary lookup
     * @param {number} id a processId, bucketId, groupId, or projectId
     * @param {number} [n] The maximum number of returned documents. Accepts 1-100 with a default of 20.
     * @param {string} [filter] Only documents with names that contain the filter string will be returned in the results.
     * @param {Sort} [sort] The document attribute that will be used to sort the results.
     * @param {SortOrder} [sortOrder] The order in which to sort the results. A value for sort must also be set.
     * @param {ProcessingStatus} [status] A status filter on the get documents query. If this value is set, then only documents with this status will be returned in the results.
     * @param {string} [nextToken] A token for pagination. If the number of documents for a given query is larger than n, the response will include a \&quot;nextToken\&quot; value. That token can be included in this field to retrieve the next batch of n documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookup: (id: number, n?: number, filter?: string, sort?: Sort, sortOrder?: SortOrder, status?: ProcessingStatus, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DocumentsApi - functional programming interface
 * @export
 */
export declare const DocumentsApiFp: (configuration?: Configuration) => {
    /**
     * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary crawl_website
     * @param {DocumentsApiCrawlWebsiteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crawlWebsite(requestParameters: DocumentsApiCrawlWebsiteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngestResponse>>;
    /**
     * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (multiple)
     * @param {DocumentsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete(requestParameters: DocumentsApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngestResponse>>;
    /**
     * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (singular)
     * @param {DocumentsApiDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(requestParameters: DocumentsApiDelete1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngestResponse>>;
    /**
     * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get
     * @param {DocumentsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(requestParameters: DocumentsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponse>>;
    /**
     * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get_processing_status_by_id
     * @param {DocumentsApiGetProcessingStatusByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessingStatusById(requestParameters: DocumentsApiGetProcessingStatusByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessStatusResponse>>;
    /**
     * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_local
     * @param {DocumentsApiIngestLocalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ingestLocal(requestParameters: DocumentsApiIngestLocalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngestResponse>>;
    /**
     * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_remote
     * @param {DocumentsApiIngestRemoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ingestRemote(requestParameters: DocumentsApiIngestRemoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngestResponse>>;
    /**
     * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary list
     * @param {DocumentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(requestParameters?: DocumentsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentListResponse>>;
    /**
     * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary lookup
     * @param {DocumentsApiLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookup(requestParameters: DocumentsApiLookupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentLookupResponse>>;
};
/**
 * DocumentsApi - factory interface
 * @export
 */
export declare const DocumentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary crawl_website
     * @param {DocumentsApiCrawlWebsiteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crawlWebsite(requestParameters: DocumentsApiCrawlWebsiteRequest, options?: AxiosRequestConfig): AxiosPromise<IngestResponse>;
    /**
     * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (multiple)
     * @param {DocumentsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete(requestParameters: DocumentsApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<IngestResponse>;
    /**
     * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (singular)
     * @param {DocumentsApiDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(requestParameters: DocumentsApiDelete1Request, options?: AxiosRequestConfig): AxiosPromise<IngestResponse>;
    /**
     * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get
     * @param {DocumentsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(requestParameters: DocumentsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentResponse>;
    /**
     * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get_processing_status_by_id
     * @param {DocumentsApiGetProcessingStatusByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessingStatusById(requestParameters: DocumentsApiGetProcessingStatusByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessStatusResponse>;
    /**
     * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_local
     * @param {DocumentsApiIngestLocalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ingestLocal(requestParameters: DocumentsApiIngestLocalRequest, options?: AxiosRequestConfig): AxiosPromise<IngestResponse>;
    /**
     * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_remote
     * @param {DocumentsApiIngestRemoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ingestRemote(requestParameters: DocumentsApiIngestRemoteRequest, options?: AxiosRequestConfig): AxiosPromise<IngestResponse>;
    /**
     * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary list
     * @param {DocumentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(requestParameters?: DocumentsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentListResponse>;
    /**
     * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary lookup
     * @param {DocumentsApiLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookup(requestParameters: DocumentsApiLookupRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentLookupResponse>;
};
/**
 * Request parameters for crawlWebsite operation in DocumentsApi.
 * @export
 * @interface DocumentsApiCrawlWebsiteRequest
 */
export type DocumentsApiCrawlWebsiteRequest = {} & WebsiteCrawlRequest;
/**
 * Request parameters for delete operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDeleteRequest
 */
export type DocumentsApiDeleteRequest = {
    /**
    * A list of documentIds which correspond to documents ingested by GroundX
    * @type {Array<string>}
    * @memberof DocumentsApiDelete
    */
    readonly documentIds: Array<string>;
};
/**
 * Request parameters for delete1 operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDelete1Request
 */
export type DocumentsApiDelete1Request = {
    /**
    * A documentId which correspond to a document ingested by GroundX
    * @type {string}
    * @memberof DocumentsApiDelete1
    */
    readonly documentId: string;
};
/**
 * Request parameters for get operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetRequest
 */
export type DocumentsApiGetRequest = {
    /**
    * The documentId of the document for which GroundX information will be provided.
    * @type {string}
    * @memberof DocumentsApiGet
    */
    readonly documentId: string;
};
/**
 * Request parameters for getProcessingStatusById operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetProcessingStatusByIdRequest
 */
export type DocumentsApiGetProcessingStatusByIdRequest = {
    /**
    * the processId for the ingest process being checked
    * @type {string}
    * @memberof DocumentsApiGetProcessingStatusById
    */
    readonly processId: string;
};
/**
 * Request parameters for ingestLocal operation in DocumentsApi.
 * @export
 * @interface DocumentsApiIngestLocalRequest
 */
export type DocumentsApiIngestLocalRequest = Array<DocumentLocalIngestRequestInner>;
/**
 * Request parameters for ingestRemote operation in DocumentsApi.
 * @export
 * @interface DocumentsApiIngestRemoteRequest
 */
export type DocumentsApiIngestRemoteRequest = {} & DocumentRemoteIngestRequest;
/**
 * Request parameters for list operation in DocumentsApi.
 * @export
 * @interface DocumentsApiListRequest
 */
export type DocumentsApiListRequest = {
    /**
    * The maximum number of returned documents. Accepts 1-100 with a default of 20.
    * @type {number}
    * @memberof DocumentsApiList
    */
    readonly n?: number;
    /**
    * Only documents with names that contain the filter string will be returned in the results.
    * @type {string}
    * @memberof DocumentsApiList
    */
    readonly filter?: string;
    /**
    * The document attribute that will be used to sort the results.
    * @type {Sort}
    * @memberof DocumentsApiList
    */
    readonly sort?: Sort;
    /**
    * The order in which to sort the results. A value for sort must also be set.
    * @type {SortOrder}
    * @memberof DocumentsApiList
    */
    readonly sortOrder?: SortOrder;
    /**
    * A status filter on the get documents query. If this value is set, then only documents with this status will be returned in the results.
    * @type {ProcessingStatus}
    * @memberof DocumentsApiList
    */
    readonly status?: ProcessingStatus;
    /**
    * A token for pagination. If the number of documents for a given query is larger than n, the response will include a \"nextToken\" value. That token can be included in this field to retrieve the next batch of n documents.
    * @type {string}
    * @memberof DocumentsApiList
    */
    readonly nextToken?: string;
};
/**
 * Request parameters for lookup operation in DocumentsApi.
 * @export
 * @interface DocumentsApiLookupRequest
 */
export type DocumentsApiLookupRequest = {
    /**
    * a processId, bucketId, groupId, or projectId
    * @type {number}
    * @memberof DocumentsApiLookup
    */
    readonly id: number;
    /**
    * The maximum number of returned documents. Accepts 1-100 with a default of 20.
    * @type {number}
    * @memberof DocumentsApiLookup
    */
    readonly n?: number;
    /**
    * Only documents with names that contain the filter string will be returned in the results.
    * @type {string}
    * @memberof DocumentsApiLookup
    */
    readonly filter?: string;
    /**
    * The document attribute that will be used to sort the results.
    * @type {Sort}
    * @memberof DocumentsApiLookup
    */
    readonly sort?: Sort;
    /**
    * The order in which to sort the results. A value for sort must also be set.
    * @type {SortOrder}
    * @memberof DocumentsApiLookup
    */
    readonly sortOrder?: SortOrder;
    /**
    * A status filter on the get documents query. If this value is set, then only documents with this status will be returned in the results.
    * @type {ProcessingStatus}
    * @memberof DocumentsApiLookup
    */
    readonly status?: ProcessingStatus;
    /**
    * A token for pagination. If the number of documents for a given query is larger than n, the response will include a \"nextToken\" value. That token can be included in this field to retrieve the next batch of n documents.
    * @type {string}
    * @memberof DocumentsApiLookup
    */
    readonly nextToken?: string;
};
/**
 * DocumentsApiGenerated - object-oriented interface
 * @export
 * @class DocumentsApiGenerated
 * @extends {BaseAPI}
 */
export declare class DocumentsApiGenerated extends BaseAPI {
    /**
     * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary crawl_website
     * @param {DocumentsApiCrawlWebsiteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    crawlWebsite(requestParameters: DocumentsApiCrawlWebsiteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IngestResponse, any>>;
    /**
     * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (multiple)
     * @param {DocumentsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    delete(requestParameters: DocumentsApiDeleteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IngestResponse, any>>;
    /**
     * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (singular)
     * @param {DocumentsApiDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    delete1(requestParameters: DocumentsApiDelete1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IngestResponse, any>>;
    /**
     * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get
     * @param {DocumentsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    get(requestParameters: DocumentsApiGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DocumentResponse, any>>;
    /**
     * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get_processing_status_by_id
     * @param {DocumentsApiGetProcessingStatusByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    getProcessingStatusById(requestParameters: DocumentsApiGetProcessingStatusByIdRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessStatusResponse, any>>;
    /**
     * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_local
     * @param {DocumentsApiIngestLocalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    ingestLocal(requestParameters: DocumentsApiIngestLocalRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IngestResponse, any>>;
    /**
     * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_remote
     * @param {DocumentsApiIngestRemoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    ingestRemote(requestParameters: DocumentsApiIngestRemoteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IngestResponse, any>>;
    /**
     * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary list
     * @param {DocumentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    list(requestParameters?: DocumentsApiListRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DocumentListResponse, any>>;
    /**
     * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary lookup
     * @param {DocumentsApiLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    lookup(requestParameters: DocumentsApiLookupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DocumentLookupResponse, any>>;
}
