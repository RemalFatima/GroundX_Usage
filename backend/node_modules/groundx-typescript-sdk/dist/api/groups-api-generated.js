"use strict";
/* tslint:disable */
/* eslint-disable */
/*
GroundX APIs

RAG Made Simple, Secure and Hallucination Free

The version of the OpenAPI document: 1.3.26
Contact: support@eyelevel.ai

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupsApiGenerated = exports.GroupsApiFactory = exports.GroupsApiFp = exports.GroupsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
const FormData = require("form-data");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * GroupsApi - axios parameter creator
 * @export
 */
const GroupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary addBucket
         * @param {number} groupId The groupId of the group which the bucket will be added to.
         * @param {number} bucketId The bucketId of the bucket being added to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBucket: (groupId, bucketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('addBucket', 'groupId', groupId);
            // verify required parameter 'bucketId' is not null or undefined
            (0, common_1.assertParamExists)('addBucket', 'bucketId', bucketId);
            const localVarPath = `/v1/group/{groupId}/bucket/{bucketId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)))
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}/bucket/{bucketId}',
                httpMethod: 'POST'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary create
         * @param {GroupCreateRequest} groupCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: (groupCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupCreateRequest' is not null or undefined
            (0, common_1.assertParamExists)('create', 'groupCreateRequest', groupCreateRequest);
            const localVarPath = `/v1/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: groupCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(groupCreateRequest, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete
         * @param {number} groupId The groupId of the group to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: (groupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'groupId', groupId);
            const localVarPath = `/v1/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}',
                httpMethod: 'DELETE'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get
         * @param {number} groupId The groupId of the group to look up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: (groupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('get', 'groupId', groupId);
            const localVarPath = `/v1/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary list
         * @param {number} [n] The maximum number of returned groups. Accepts 1-100 with a default of 20.
         * @param {string} [nextToken] A token for pagination. If the number of groups for a given query is larger than n, the response will include a \&quot;nextToken\&quot; value. That token can be included in this field to retrieve the next batch of n groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: (n, nextToken, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }
            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary removeBucket
         * @param {number} groupId The groupId of the group which the bucket will be removed from.
         * @param {number} bucketId The bucketId of the bucket which will be removed from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBucket: (groupId, bucketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('removeBucket', 'groupId', groupId);
            // verify required parameter 'bucketId' is not null or undefined
            (0, common_1.assertParamExists)('removeBucket', 'bucketId', bucketId);
            const localVarPath = `/v1/group/{groupId}/bucket/{bucketId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)))
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}/bucket/{bucketId}',
                httpMethod: 'DELETE'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary update
         * @param {number} groupId The groupId of the group to update.
         * @param {GroupUpdateRequest} groupUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: (groupId, groupUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('update', 'groupId', groupId);
            // verify required parameter 'groupUpdateRequest' is not null or undefined
            (0, common_1.assertParamExists)('update', 'groupUpdateRequest', groupUpdateRequest);
            const localVarPath = `/v1/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: groupUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(groupUpdateRequest, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.GroupsApiAxiosParamCreator = GroupsApiAxiosParamCreator;
/**
 * GroupsApi - functional programming interface
 * @export
 */
const GroupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.GroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary addBucket
         * @param {GroupsApiAddBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBucket(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addBucket(requestParameters.groupId, requestParameters.bucketId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary create
         * @param {GroupsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const groupCreateRequest = {
                    name: requestParameters.name,
                    bucketName: requestParameters.bucketName
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.create(groupCreateRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete
         * @param {GroupsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.delete(requestParameters.groupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get
         * @param {GroupsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.get(requestParameters.groupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary list
         * @param {GroupsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters = {}, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.list(requestParameters.n, requestParameters.nextToken, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary removeBucket
         * @param {GroupsApiRemoveBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBucket(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeBucket(requestParameters.groupId, requestParameters.bucketId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary update
         * @param {GroupsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const groupUpdateRequest = {
                    newName: requestParameters.newName
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.update(requestParameters.groupId, groupUpdateRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.GroupsApiFp = GroupsApiFp;
/**
 * GroupsApi - factory interface
 * @export
 */
const GroupsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.GroupsApiFp)(configuration);
    return {
        /**
         * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary addBucket
         * @param {GroupsApiAddBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBucket(requestParameters, options) {
            return localVarFp.addBucket(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary create
         * @param {GroupsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters, options) {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete
         * @param {GroupsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get
         * @param {GroupsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters, options) {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary list
         * @param {GroupsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters = {}, options) {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary removeBucket
         * @param {GroupsApiRemoveBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBucket(requestParameters, options) {
            return localVarFp.removeBucket(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary update
         * @param {GroupsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters, options) {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.GroupsApiFactory = GroupsApiFactory;
/**
 * GroupsApiGenerated - object-oriented interface
 * @export
 * @class GroupsApiGenerated
 * @extends {BaseAPI}
 */
class GroupsApiGenerated extends base_1.BaseAPI {
    /**
     * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary addBucket
     * @param {GroupsApiAddBucketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    addBucket(requestParameters, options) {
        return (0, exports.GroupsApiFp)(this.configuration).addBucket(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary create
     * @param {GroupsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    create(requestParameters, options) {
        return (0, exports.GroupsApiFp)(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete
     * @param {GroupsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    delete(requestParameters, options) {
        return (0, exports.GroupsApiFp)(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get
     * @param {GroupsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    get(requestParameters, options) {
        return (0, exports.GroupsApiFp)(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary list
     * @param {GroupsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    list(requestParameters = {}, options) {
        return (0, exports.GroupsApiFp)(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary removeBucket
     * @param {GroupsApiRemoveBucketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    removeBucket(requestParameters, options) {
        return (0, exports.GroupsApiFp)(this.configuration).removeBucket(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary update
     * @param {GroupsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    update(requestParameters, options) {
        return (0, exports.GroupsApiFp)(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GroupsApiGenerated = GroupsApiGenerated;
