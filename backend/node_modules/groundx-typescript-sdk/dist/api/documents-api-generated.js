"use strict";
/* tslint:disable */
/* eslint-disable */
/*
GroundX APIs

RAG Made Simple, Secure and Hallucination Free

The version of the OpenAPI document: 1.3.26
Contact: support@eyelevel.ai

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentsApiGenerated = exports.DocumentsApiFactory = exports.DocumentsApiFp = exports.DocumentsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
const browser_1 = require("file-type/browser");
const FormData = require("form-data");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
const DocumentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary crawl_website
         * @param {WebsiteCrawlRequest} [websiteCrawlRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crawlWebsite: (websiteCrawlRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/ingest/documents/website`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: websiteCrawlRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/documents/website',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(websiteCrawlRequest, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete (multiple)
         * @param {Array<string>} documentIds A list of documentIds which correspond to documents ingested by GroundX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: (documentIds, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'documentIds' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'documentIds', documentIds);
            const localVarPath = `/v1/ingest/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            if (documentIds) {
                localVarQueryParameter['documentIds'] = documentIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/documents',
                httpMethod: 'DELETE'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete (singular)
         * @param {string} documentId A documentId which correspond to a document ingested by GroundX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: (documentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'documentId' is not null or undefined
            (0, common_1.assertParamExists)('delete1', 'documentId', documentId);
            const localVarPath = `/v1/ingest/document/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/document/{documentId}',
                httpMethod: 'DELETE'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get
         * @param {string} documentId The documentId of the document for which GroundX information will be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: (documentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'documentId' is not null or undefined
            (0, common_1.assertParamExists)('get', 'documentId', documentId);
            const localVarPath = `/v1/ingest/document/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/document/{documentId}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get_processing_status_by_id
         * @param {string} processId the processId for the ingest process being checked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessingStatusById: (processId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'processId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessingStatusById', 'processId', processId);
            const localVarPath = `/v1/ingest/{processId}`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId !== undefined ? processId : `-processId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/{processId}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary ingest_local
         * @param {Array<DocumentLocalIngestRequestInner>} [documentLocalIngestRequestInner]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestLocal: (documentLocalIngestRequestInner, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/ingest/documents/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = (name, data, isBinary, isPrimitiveType) => __awaiter(this, void 0, void 0, function* () {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = yield (0, browser_1.fromBuffer)(data);
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`;
                        localVarFormParams.append(name, data, filename);
                    }
                    else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if ((0, common_1.isBrowser)()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        }
                        else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = yield data.arrayBuffer();
                            const buffer = Buffer.from(bytes);
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                }
                else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                            localVarFormParams.append(name, JSON.stringify(data));
                        }
                        else {
                            localVarFormParams.append(name, data);
                        }
                    }
                    else {
                        if ((0, common_1.isBrowser)()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }));
                        }
                        else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            });
            if (!(0, common_1.isBrowser)())
                Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            if (documentLocalIngestRequestInner) {
                for (const element of documentLocalIngestRequestInner) {
                    yield addFormParam('blob', element.blob, true, true);
                    yield addFormParam('metadata', element.metadata, false, false);
                }
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: documentLocalIngestRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/documents/local',
                httpMethod: 'POST'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary ingest_remote
         * @param {DocumentRemoteIngestRequest} [documentRemoteIngestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestRemote: (documentRemoteIngestRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/ingest/documents/remote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: documentRemoteIngestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/documents/remote',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(documentRemoteIngestRequest, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary list
         * @param {number} [n] The maximum number of returned documents. Accepts 1-100 with a default of 20.
         * @param {string} [filter] Only documents with names that contain the filter string will be returned in the results.
         * @param {Sort} [sort] The document attribute that will be used to sort the results.
         * @param {SortOrder} [sortOrder] The order in which to sort the results. A value for sort must also be set.
         * @param {ProcessingStatus} [status] A status filter on the get documents query. If this value is set, then only documents with this status will be returned in the results.
         * @param {string} [nextToken] A token for pagination. If the number of documents for a given query is larger than n, the response will include a \&quot;nextToken\&quot; value. That token can be included in this field to retrieve the next batch of n documents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: (n, filter, sort, sortOrder, status, nextToken, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/ingest/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/documents',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary lookup
         * @param {number} id a processId, bucketId, groupId, or projectId
         * @param {number} [n] The maximum number of returned documents. Accepts 1-100 with a default of 20.
         * @param {string} [filter] Only documents with names that contain the filter string will be returned in the results.
         * @param {Sort} [sort] The document attribute that will be used to sort the results.
         * @param {SortOrder} [sortOrder] The order in which to sort the results. A value for sort must also be set.
         * @param {ProcessingStatus} [status] A status filter on the get documents query. If this value is set, then only documents with this status will be returned in the results.
         * @param {string} [nextToken] A token for pagination. If the number of documents for a given query is larger than n, the response will include a \&quot;nextToken\&quot; value. That token can be included in this field to retrieve the next batch of n documents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookup: (id, n, filter, sort, sortOrder, status, nextToken, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('lookup', 'id', id);
            const localVarPath = `/v1/ingest/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ingest/documents/{id}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DocumentsApiAxiosParamCreator = DocumentsApiAxiosParamCreator;
/**
 * DocumentsApi - functional programming interface
 * @export
 */
const DocumentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DocumentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary crawl_website
         * @param {DocumentsApiCrawlWebsiteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crawlWebsite(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const websiteCrawlRequest = {
                    websites: requestParameters.websites
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.crawlWebsite(websiteCrawlRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete (multiple)
         * @param {DocumentsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.delete(requestParameters.documentIds, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete (singular)
         * @param {DocumentsApiDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.delete1(requestParameters.documentId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get
         * @param {DocumentsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.get(requestParameters.documentId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get_processing_status_by_id
         * @param {DocumentsApiGetProcessingStatusByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessingStatusById(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcessingStatusById(requestParameters.processId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary ingest_local
         * @param {DocumentsApiIngestLocalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestLocal(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const documentLocalIngestRequestInner = requestParameters;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ingestLocal(documentLocalIngestRequestInner, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary ingest_remote
         * @param {DocumentsApiIngestRemoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestRemote(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const documentRemoteIngestRequest = {
                    documents: requestParameters.documents
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ingestRemote(documentRemoteIngestRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary list
         * @param {DocumentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters = {}, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.list(requestParameters.n, requestParameters.filter, requestParameters.sort, requestParameters.sortOrder, requestParameters.status, requestParameters.nextToken, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary lookup
         * @param {DocumentsApiLookupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookup(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.lookup(requestParameters.id, requestParameters.n, requestParameters.filter, requestParameters.sort, requestParameters.sortOrder, requestParameters.status, requestParameters.nextToken, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DocumentsApiFp = DocumentsApiFp;
/**
 * DocumentsApi - factory interface
 * @export
 */
const DocumentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DocumentsApiFp)(configuration);
    return {
        /**
         * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary crawl_website
         * @param {DocumentsApiCrawlWebsiteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crawlWebsite(requestParameters, options) {
            return localVarFp.crawlWebsite(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete (multiple)
         * @param {DocumentsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary delete (singular)
         * @param {DocumentsApiDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(requestParameters, options) {
            return localVarFp.delete1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get
         * @param {DocumentsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters, options) {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary get_processing_status_by_id
         * @param {DocumentsApiGetProcessingStatusByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessingStatusById(requestParameters, options) {
            return localVarFp.getProcessingStatusById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary ingest_local
         * @param {DocumentsApiIngestLocalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestLocal(requestParameters, options) {
            return localVarFp.ingestLocal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary ingest_remote
         * @param {DocumentsApiIngestRemoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestRemote(requestParameters, options) {
            return localVarFp.ingestRemote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary list
         * @param {DocumentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters = {}, options) {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
         * @summary lookup
         * @param {DocumentsApiLookupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookup(requestParameters, options) {
            return localVarFp.lookup(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DocumentsApiFactory = DocumentsApiFactory;
/**
 * DocumentsApiGenerated - object-oriented interface
 * @export
 * @class DocumentsApiGenerated
 * @extends {BaseAPI}
 */
class DocumentsApiGenerated extends base_1.BaseAPI {
    /**
     * Upload the content of a publicly accessible website for ingestion into a GroundX bucket. This is done by following links within a specified URL, recursively, up to a specified depth or number of pages.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary crawl_website
     * @param {DocumentsApiCrawlWebsiteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    crawlWebsite(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).crawlWebsite(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple documents hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (multiple)
     * @param {DocumentsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    delete(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a single document hosted on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary delete (singular)
     * @param {DocumentsApiDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    delete1(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).delete1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Look up an existing document by documentId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get
     * @param {DocumentsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    get(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current status of an ingest, initiated with documents.ingest_remote, documents.ingest_local, or documents.crawl_website, by specifying the processId (the processId is included in the response of the documents.ingest functions).  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary get_processing_status_by_id
     * @param {DocumentsApiGetProcessingStatusByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    getProcessingStatusById(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).getProcessingStatusById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload documents hosted on a local file system for ingestion into a GroundX bucket.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_local
     * @param {DocumentsApiIngestLocalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    ingestLocal(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).ingestLocal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Ingest documents hosted on public URLs to a GroundX bucket.   Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary ingest_remote
     * @param {DocumentsApiIngestRemoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    ingestRemote(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).ingestRemote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * lookup all documents across all resources which are currently on GroundX  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary list
     * @param {DocumentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    list(requestParameters = {}, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * lookup the document(s) associated with a processId, bucketId, groupId, or projectId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments.
     * @summary lookup
     * @param {DocumentsApiLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    lookup(requestParameters, options) {
        return (0, exports.DocumentsApiFp)(this.configuration).lookup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DocumentsApiGenerated = DocumentsApiGenerated;
