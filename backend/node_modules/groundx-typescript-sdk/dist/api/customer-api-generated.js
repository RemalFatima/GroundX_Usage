"use strict";
/* tslint:disable */
/* eslint-disable */
/*
GroundX APIs

RAG Made Simple, Secure and Hallucination Free

The version of the OpenAPI document: 1.3.26
Contact: support@eyelevel.ai

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerApiGenerated = exports.CustomerApiFactory = exports.CustomerApiFp = exports.CustomerApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
const FormData = require("form-data");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * CustomerApi - axios parameter creator
 * @export
 */
const CustomerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the account information associated with the API key.
         * @summary get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/customer',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CustomerApiAxiosParamCreator = CustomerApiAxiosParamCreator;
/**
 * CustomerApi - functional programming interface
 * @export
 */
const CustomerApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CustomerApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get the account information associated with the API key.
         * @summary get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.get(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.CustomerApiFp = CustomerApiFp;
/**
 * CustomerApi - factory interface
 * @export
 */
const CustomerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CustomerApiFp)(configuration);
    return {
        /**
         * Get the account information associated with the API key.
         * @summary get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options) {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
    };
};
exports.CustomerApiFactory = CustomerApiFactory;
/**
 * CustomerApiGenerated - object-oriented interface
 * @export
 * @class CustomerApiGenerated
 * @extends {BaseAPI}
 */
class CustomerApiGenerated extends base_1.BaseAPI {
    /**
     * Get the account information associated with the API key.
     * @summary get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    get(options) {
        return (0, exports.CustomerApiFp)(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CustomerApiGenerated = CustomerApiGenerated;
