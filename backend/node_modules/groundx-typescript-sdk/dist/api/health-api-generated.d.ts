import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from 'groundx-typescript-sdk/dist/configuration';
import { RequestArgs, BaseAPI } from 'groundx-typescript-sdk/dist/base';
import { HealthResponse } from 'groundx-typescript-sdk/dist/models';
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Look up the current health status of a specific service. Statuses update every 5 minutes.
     * @summary get
     * @param {string} service The name of the service to look up.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: (service: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List the current health status of all services. Statuses update every 5 minutes.
     * @summary list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     * Look up the current health status of a specific service. Statuses update every 5 minutes.
     * @summary get
     * @param {HealthApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(requestParameters: HealthApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>>;
    /**
     * List the current health status of all services. Statuses update every 5 minutes.
     * @summary list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Look up the current health status of a specific service. Statuses update every 5 minutes.
     * @summary get
     * @param {HealthApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(requestParameters: HealthApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<HealthResponse>;
    /**
     * List the current health status of all services. Statuses update every 5 minutes.
     * @summary list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(options?: AxiosRequestConfig): AxiosPromise<HealthResponse>;
};
/**
 * Request parameters for get operation in HealthApi.
 * @export
 * @interface HealthApiGetRequest
 */
export type HealthApiGetRequest = {
    /**
    * The name of the service to look up.
    * @type {string}
    * @memberof HealthApiGet
    */
    readonly service: string;
};
/**
 * HealthApiGenerated - object-oriented interface
 * @export
 * @class HealthApiGenerated
 * @extends {BaseAPI}
 */
export declare class HealthApiGenerated extends BaseAPI {
    /**
     * Look up the current health status of a specific service. Statuses update every 5 minutes.
     * @summary get
     * @param {HealthApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiGenerated
     */
    get(requestParameters: HealthApiGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HealthResponse, any>>;
    /**
     * List the current health status of all services. Statuses update every 5 minutes.
     * @summary list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiGenerated
     */
    list(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HealthResponse, any>>;
}
